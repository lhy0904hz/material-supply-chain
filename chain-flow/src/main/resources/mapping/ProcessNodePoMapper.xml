<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.material.chain.flow.mapper.ProcessNodePoMapper">
  <resultMap id="BaseResultMap" type="com.material.chain.flow.model.po.ProcessNodePo">
    <!--@mbg.generated-->
    <!--@Table t_process_node-->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="node_name" jdbcType="VARCHAR" property="nodeName" />
    <result column="process_id" jdbcType="BIGINT" property="processId" />
    <result column="is_ assign" jdbcType="TINYINT" property="isAssign" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_id" jdbcType="BIGINT" property="createId" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="update_id" jdbcType="BIGINT" property="updateId" />
    <result column="update_time" jdbcType="BIGINT" property="updateTime" />
    <result column="node_type" jdbcType="TINYINT" property="nodeType" />
    <result column="role_ids" jdbcType="LONGVARCHAR" property="roleIds" />
    <result column="user_Ids" jdbcType="LONGVARCHAR" property="userIds" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, node_name, process_id, `is_ assign`, `status`, create_id, create_time, update_id, 
    update_time, node_type, role_ids, user_Ids
  </sql>
  <update id="updateBatch" parameterType="java.util.List">
    <!--@mbg.generated-->
    update t_process_node
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="node_name = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.nodeName,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="process_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.processId,jdbcType=BIGINT}
        </foreach>
      </trim>
      <trim prefix="`is_ assign` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.isAssign,jdbcType=TINYINT}
        </foreach>
      </trim>
      <trim prefix="`status` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.status,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="create_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.createId,jdbcType=BIGINT}
        </foreach>
      </trim>
      <trim prefix="create_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.createTime,jdbcType=BIGINT}
        </foreach>
      </trim>
      <trim prefix="update_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.updateId,jdbcType=BIGINT}
        </foreach>
      </trim>
      <trim prefix="update_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.updateTime,jdbcType=BIGINT}
        </foreach>
      </trim>
      <trim prefix="node_type = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.nodeType,jdbcType=TINYINT}
        </foreach>
      </trim>
      <trim prefix="role_ids = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.roleIds,jdbcType=LONGVARCHAR}
        </foreach>
      </trim>
      <trim prefix="user_Ids = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.userIds,jdbcType=LONGVARCHAR}
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id,jdbcType=BIGINT}
    </foreach>
  </update>
  <update id="updateBatchSelective" parameterType="java.util.List">
    <!--@mbg.generated-->
    update t_process_node
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="node_name = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.nodeName != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.nodeName,jdbcType=VARCHAR}
          </if>
        </foreach>
      </trim>
      <trim prefix="process_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.processId != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.processId,jdbcType=BIGINT}
          </if>
        </foreach>
      </trim>
      <trim prefix="`is_ assign` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.isAssign != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.isAssign,jdbcType=TINYINT}
          </if>
        </foreach>
      </trim>
      <trim prefix="`status` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.status != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.status,jdbcType=INTEGER}
          </if>
        </foreach>
      </trim>
      <trim prefix="create_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.createId != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.createId,jdbcType=BIGINT}
          </if>
        </foreach>
      </trim>
      <trim prefix="create_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.createTime != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.createTime,jdbcType=BIGINT}
          </if>
        </foreach>
      </trim>
      <trim prefix="update_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.updateId != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.updateId,jdbcType=BIGINT}
          </if>
        </foreach>
      </trim>
      <trim prefix="update_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.updateTime != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.updateTime,jdbcType=BIGINT}
          </if>
        </foreach>
      </trim>
      <trim prefix="node_type = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.nodeType != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.nodeType,jdbcType=TINYINT}
          </if>
        </foreach>
      </trim>
      <trim prefix="role_ids = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.roleIds != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.roleIds,jdbcType=LONGVARCHAR}
          </if>
        </foreach>
      </trim>
      <trim prefix="user_Ids = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.userIds != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.userIds,jdbcType=LONGVARCHAR}
          </if>
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id,jdbcType=BIGINT}
    </foreach>
  </update>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into t_process_node
    (node_name, process_id, `is_ assign`, `status`, create_id, create_time, update_id, 
      update_time, node_type, role_ids, user_Ids)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.nodeName,jdbcType=VARCHAR}, #{item.processId,jdbcType=BIGINT}, #{item.isAssign,jdbcType=TINYINT}, 
        #{item.status,jdbcType=INTEGER}, #{item.createId,jdbcType=BIGINT}, #{item.createTime,jdbcType=BIGINT}, 
        #{item.updateId,jdbcType=BIGINT}, #{item.updateTime,jdbcType=BIGINT}, #{item.nodeType,jdbcType=TINYINT}, 
        #{item.roleIds,jdbcType=LONGVARCHAR}, #{item.userIds,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
</mapper>